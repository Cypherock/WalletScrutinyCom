reproducible:
  title: Reproducible when tested
  short: Reproducible
  color: '#4da84d'
  redflag: false
  message: >
    At the time of this analysis, the app as downloaded from the platform was
    reproducible from the code provided by the developers!
  explanation : >
    The app can be independently verified. If the provider puts your funds at
    risk on purpose or by accident, security researchers can see this if they
    care to look. It also means that inside the company engineers can verify
    that the release manager is releasing the app based on code known to all
    engineers on the team. A scammer would have to work under the potential eyes
    of security researchers. He would have to take more effort in hiding any
    exploit.
    
    
    "Reproducible" does not mean "verified". There is good reason to believe
    that security researchers as of today would not detect very blatant
    backdoors in the public source code before it gets exploited, much less if
    the attacker takes moderate efforts to hide it.
    
    
    To understand why some lines of difference are ok and others not, one has
    to consider how app signing works. Android supports currently 3 signing
    schemes and in
    [version 1](https://source.android.com/security/apksigning/v2#v1-verification)
    the signature is put inside the application file. As the tester must not
    have the release signing key, those files necessarily are missing or differ
    from the version on Google Play. The file `apktool.yml` was never part of
    the app and is generated by the analysis tool
    "[apktool](https://ibotpeaches.github.io/Apktool/)".
  question: 
  details: 
nonverifiable:
  title: Not reproducible from the source provided
  short: 'Not&nbsp;Reproducible'
  color: '#d33100'
  redflag: true
  message: >
    The app provider also shares code but we could so far not verify that the
    published code matches the published app!
  explanation : >
    This verdict means that the provider did share some source code but that we
    could not verify that this source code matches the released app. This might
    be due to the source not building deterministically or due to the
    provided instructions on how to compile the app not being sufficient or
    due to the provider excluding parts from the public source code. In any
    case, the result is a discrepancy between the app we can create and the app
    we can find on the app store and any discrepancy might leak your backup to the
    server on purpose or by accident.
    
    
    As we cannot verify that the source provided is the source the app was
    compiled from, this category is only slightly better than **closed source**
    but for now we have hope projects come around and fix verifiability issues.
  question: Is the published app matching the published code?
  details: >
    Published code doesn't help much if it is not what the published app was
    built from. At this point we try to reproduce the app. We

    1. obtain the app from the platform

    1. compile the app from the published source code using the published build
       instructions
    1. compare the two apps

    1. we might spend some time working around
       [issues that are easy to work around](https://issuetracker.google.com/issues/110237303)

    If this fails, we might search if other revisions match or if we can
    deduct the source of the mismatch but generally consider it on the provider to
    provide the correct source code and build instructions to reproduce the build,
    so we usually open a ticket in their code repository and
    classify the wallet as
nosource:
  title: No source for current release found
  short: 'No&nbsp;Source!'
  color: '#d33100'
  redflag: true
  message: >
    Without public source of the reviewed release available, this app cannot be
    verified!
  explanation : >
    This verdict means that we could not find source to compile the current
    release of the app from.
    
    
    Internally the company might do everything right but as we can't verify it,
    there is nothing protecting the user from an exit-scam where the provider
    releases an app that leaks the keys to the servers.
  question: Is the source code publicly available?
  details: >
    A wallet that claims to not give the provider the means to steal the users'
    funds might actually be lying. In the spirit of *"Don't trust - verify!"*
    you don't want to take the provider at his word, but trust that people
    hunting for fame and bug bounties could actually find flaws and back-doors
    in the wallet so the provider doesn't dare to put these in.


    Back-doors and flaws are frequently found in closed source products but some
    remain hidden for years. And even in open source security software there
    might be
    [catastrophic flaws](https://www.cvedetails.com/vulnerability-list.php?vendor_id=97&product_id=585&version_id=&page=1&hasexp=0&opdos=0&opec=0&opov=0&opcsrf=0&opgpriv=0&opsqli=0&opxss=0&opdirt=0&opmemc=0&ophttprs=0&opbyp=0&opfileinc=0&opginf=0&cvssscoremin=0&cvssscoremax=0&year=0&month=0&cweid=0&order=3&trc=98&sha=cf091948bd7a20cd650cfc7fb718a5f4400a6d71)
    undiscovered for years.


    An evil wallet provider would certainly prefer not to publish the code, as
    hiding it makes audits orders of magnitude harder.


    For your security, you thus want the code to be available for review.


    If the wallet provider doesn't share up to date code, our analysis stops
    there as the wallet could steal your funds at any time, and there is no
    protection except the provider's word.


    "Up to date" strictly means that any instance of the app being updated
    without the source code being updated counts as closed source. This puts the
    burden on the provider to always first release the source code before
    releasing the app's update. This paragraph is a clarification to our rules
    following
    [a little poll](https://twitter.com/WalletScrutiny/status/1408933028227956736).


    We are not concerned about the license as long as it allows us to perform our
    analysis. For a security audit, it is not necessary that the provider allows
    others to use their code for a competing wallet.
custodial:
  title: 'Custodial: The provider holds the coins'
  short: Custodial!
  color: '#d33100'
  redflag: true
  message: >
    As the provider of this app holds the users coins, verifiability of the
    app is not relevant to the security of the funds!
  explanation : >
    This verdict means that the app might or might not publish source code and maybe
    it is even possible to reproduce the build from the source code but as it is
    custodial, the provider already has exclusive control over the funds, so it
    is not a wallet where you would be in sole control of your funds.
    
    
    Custodial wallets might not be the worst option for all users.
    
    * Do your own research if the provider is trust-worthy.
    
    * Do you know at least enough about them so you can sue them when you have to?
    
    * Is the provider under a jurisdiction that will allow them to release your funds when you need them?
    
    * Is the provider taking security measures proportional to the amount of
      funds secured? If they have a million users and don't use cold storage,
      that hot wallet is a million times more valuable for hackers to attack.
      A million times more effort will be taken by hackers to infiltrate their
      security systems. Will they detect when for some software error a hacker
      is spending other people's money before the losses are unrecoverable?
  question: Is it self-custodial?
  details: >
    A custodial service is a service where the funds are held by a third party
    like the provider. The custodial service can at any point steal all the
    funds of all the users at the custodian's discretion. Our investigations
    stop there.


    Some services might claim their setup is super secure, that they don't
    actually have access to the funds, or that the access is shared between
    multiple parties. For our evaluation of it being a wallet, these details are
    irrelevant. They might be a trustworthy Bitcoin bank and they might be a
    better fit for certain users than being your own bank but our investigation
    still stops there as we are only interested in wallets.


    Apps that claim to be non-custodial but feature custodial accounts without
    very clearly marking those as custodial are also considered "custodial" as a
    whole to avoid trusting users following our assessment to fall for this
    important limitation of said apps.
fewusers:
  title: 'Few users'
  short: 'Few&nbsp;Users'
  color: 'var(--indifferent, #3d506d)'
  redflag: false
  message: This app has too few users for now to be reviewed in detail.
  explanation : >
    This app still needs to be evaluated but before that, gain some users. In
    the store there is an infinite list of "wallets" and we focus on those
    that have the biggest impact if things go wrong.
  question: 
  details: 
defunct:
  title: 'Not functioning anymore'
  short: 'Defunct'
  color: '#d33100'
  redflag: false
  message: >
    This app went out of business ... or so. Read the analysis for details.
  explanation : >
    This app is no more. The provider removed it from the platform and/or
    stopped supporting it.
  question: 
  details: 
wip:
  title: 'Work in Progress'
  short: 'WIP'
  color: 'var(--indifferent, #3d506d)'
  redflag: false
  message: 'We still have to analyze this app.' 
  explanation : >
    This app still needs to be evaluated. We only gathered name and logo and
    maybe some more details but we have not really looked much into it yet.
  question: 
  details: 
nobtc:
  title: 'A wallet but not for Bitcoin'
  short: 'Non-BTC'
  color: 'var(--indifferent, #3d506d)'
  redflag: false
  message: >
    The app can send something but not BTC. We currently do not investigate
    other wallets.
  explanation : >
    This app appears to not be a bitcoin wallet but might serve as a relevant
    app for other tokens or currencies that we currently are not looking into
    yet.
  question: Is it for Bitcoins?
  details: >
    At this point we only look into wallets that at least also support BTC.
nowallet:
  title: 'Not a wallet'
  short: 'No&nbsp;Wallet'
  color: 'var(--indifferent, #3d506d)'
  redflag: false
  message: >
    We could not find this to be an app meant to store, receive and send
    coins.
  explanation : >
    This appears to not be an app to send and receive bitcoins. We will
    probably remove this app from the project.
  question: Is it a wallet?
  details: >
    If it's called "wallet" but is actually only a portfolio tracker, we don't look
    any deeper, assuming it is not meant to control funds. What has no funds, can't
    lose your coins. *It might still leak your financial history!*
obfuscated:
  title: 'Obfuscated'
  short: 'Obfuscated'
  color: '#d33100'
  redflag: true
  message: >
    The app's binary contains active obfuscation which makes it
    significantly harder to analyze what it is doing.
  explanation : >
    This verdict means that the app could not be decompiled meaningfully.
    In benign cases code symbols are replaced by short strings to make the app
    smaller but for the sake of transparency this should not be done for 
    non-reproducible Bitcoin wallets. (Reproducible wallets could obfuscate the
    app for size improvements as the reproducibility would assure the
    auditability.)
  question: Is the decompiled app auditable?
  details: >
    Some providers claim to publish their source code but absent
    reproducibility, it is impossible to verify if the code published has
    anything to do with the app offered for download.
    
    
    Especially in the above cases, obfuscation is a huge red flag. If the code
    is public, why obfuscate it?
    
    
    As obfuscation is such a red flag when looking for transparency, we do also
    sometimes inspect the binaries of closed source apps.
    
    
    As looking for code obfuscation is a more involved task, we do not inspect
    all closed source apps but if we see other red flags, we might use this test
    to get clarity abuot putting the app into this red-flag category.
plainkey:
  title: 'Shares keys to send'
  short: 'Shares keys'
  color: '#d33100'
  redflag: true
  message: >
    This wallet depends on sharing the private key to create a transaction.
  explanation : >
  question: Can the device sign transactions?
  details: >
    Some people claim their paper wallet is a hardware wallet. Others use RFID
    chips with the private keys on them. A very crucial drawpack of those
    systems is that in order to send a transaction, the private key has to be
    brought onto a different system that doesn't necessarily share all the
    desired aspects of a hardware wallet.
    
    
    Paper wallets need to be printed, exposing the keys to the PC and the
    printer even before sending funds to it.
prefilled:
  title: 'Provided keys'
  short: 'Provided&nbsp;private&nbsp;keys'
  color: '#d33100'
  redflag: true
  message: >
    It's a known fact that the device gets delivered with the private keys as
    defined by the provider.
  explanation : >
    The device is delivered with the private keys. This means the provider had
    direct access to those keys and as there is no way of prooving he deleted
    them, this system relies on trust and cannot be verified.
  question: Are the keys hidden from the provider?
  details: >
    The best hardware wallet cannot guarantee that the provider deleted the
    keys if the private keys were put onto the device by im in the first place.
    
    
    There is no way of knowing if the provider took a copy in the process. If he
    did, all funds controlled by those devices are potentially under the control
    of the provider and could be move out of the client's control at any time at
    the provider's discretion.
noita:
  title: 'No ITA'
  short: 'Bad&nbsp;Interface'
  color: '#d33100'
  redflag: true
  message: >
    The design of the device does not allow the user to verify what he is
    signing.
  explanation : >
    This wallet lacks either an output device such as a screen, an input
    device such as touch or physical buttons or both. In consequence, crucial
    elements of approving transactions is being delegated to other hardware such
    as a general purpose PC or phone which defeats the purpose of a hardware
    wallet.
    
    
    The software of the device might be perfect but this device cannot be
    recommended due to this fundamental flaw.
  question: Can the user verify transactions on the device?
  details: >
    These are devices
    that might generate secure private key material, outside the reach of the
    provider but that do not have the means to let the user verify transactions
    on the device itself. This verdict includes screen-less smart cards or
    USB-dongles.
   
